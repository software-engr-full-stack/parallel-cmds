# Optional "meta" object
meta:
  # All fields are optional
  # Directory must exist because the program will change to this directory before executing the shell commands.
  working_dir: '/tmp/current'

  # Write stdout/err to stdout/err and these file. If not full path, the files will be created under "working_dir".
  # If "working_dir" is not present, the file will be created under the directory in which
  # this program is run. Make sure you have write access to "working_dir".
  out_file: 'default-out-file.log'
  err_file: 'default-err-file.log'

# A "series" object: commands are executed in series
series: [
  # A "command" object for a single command
  {
    # Can have optional "meta" object
    meta: { working_dir: '/var' },
    cmd: 'pwd'
  },

  # An list of commands to be executed in parallel.
  # Probably better to have all commands in a parallel group have the same "meta" object.
  # It seems a race condition is possible. This manifested in a change of directories
  # in a string type using the working directory value of a "command" type. I don't know why.
  # They are executed in their own separate go routines.
  [
    # A shell command string: the working directory and out and err files are inherited from "meta"
    'whoami',

    # A "command" object for a single command: no "meta" object, the working directory is the
    # directory where this program was run. There are no out and err files for this command therefore
    # the stdout and stderr of this command aren't written to any files.
    { cmd: 'sleep 2' },

    'sleep 3',

    { cmd: 'sleep 1' }
  ],
]

parallel: [
  'sleep 4',
  { cmd: 'whoami' },
  { cmd: 'sleep 2' },
]
